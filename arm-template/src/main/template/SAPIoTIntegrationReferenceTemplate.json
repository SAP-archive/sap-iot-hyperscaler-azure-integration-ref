{
	"parameters": {
		"name": {
			"type": "string",
			"maxLength": 25,
			"metadata": {
				"description": "Defines a value for resource creation."
			}
		},
		"AADApplicationClientIdForAzureFunctions": {
			"type": "string",
			"metadata": {
				"description": "Defines a secure value for Azure active directory application client ID for Azure functions. This value will be used to create ADX service principal with User role."
			}
		},
		"AADApplicationClientIdForSapIotAbstraction": {
			"type": "string",
			"metadata": {
				"description": "Defines a secure value for Azure active directory application client id for SAP IoT abstraction. This value will be used to create ADX service principal with Viewer role."
			}
		},
		"AADClientSecret": {
			"type": "securestring",
			"metadata": {
				"description": "Defines a secure value for Azure active directory client secret."
			}
		},
		"AADTenantID": {
			"type": "string",
			"metadata": {
				"description": "Defines a secure value for Azure active directory tenant id."
			}
		},
		"SAPIotTenantAuthenticationTokenEndpoint": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for SAP IoT tenant authentication token endpoint."
			}
		},
		"SAPIotTenantID": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for SAP IoT tenant id."
			}
		},
		"SAPIotTenantClientID": {
			"type": "string",
			"metadata": {
				"description": "Defines a secure value for SAP IoT tenant client id."
			}
		},
		"SAPIotTenantClientSecret": {
			"type": "securestring",
			"metadata": {
				"description": "Defines a secure value for SAP IoT tenant client secret."
			}
		},
		"scopesToAccessSAPIotApis": {
			"type": "string",
			"metadata": {
				"description": "List of authorization scopes required to access the Mapping and Configuration Lookup APIs. You can provide comma separated values for multiple scopes."
			}
		},
		"modelConfigurationAppHost": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for model configuration app host."
			}
		},
		"modelMappingAppHost": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for model mapping app host."
			}
		},
		"mappingFunctionZipURI": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for mapping function Zip URI."
			}
		},
		"notificationFunctionZipURI": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for notification function Zip URI."
			}
		},
		"deviceManagementFunctionZipURI": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for device management function Zip URI."
			}
		},
		"deleteTimeSeriesFunctionZipURI": {
			"type": "string",
			"metadata": {
				"description": "Defines a value for delete time series function Zip URI."
			}
		},
		"ingestionType": {
			"type": "string",
			"defaultValue": "Batching",
			"allowedValues": [
				"Batching",
				"Streaming"
			],
			"metadata": {
				"description": "Defines ingestion type for mapping and notification function."
			}
		},
		"ingestionFunctionServicePlan": {
			"defaultValue": "Consumption",
			"allowedValues": [
				"Consumption",
				"ElasticPremiumEP1",
				"ElasticPremiumEP2",
				"ElasticPremiumEP3"
			],
			"type": "String",
			"metadata": {
				"description": "Defines ingestion function SKU. Check details at https://docs.microsoft.com/en-us/azure/azure-functions/functions-scale?WT.mc_id=Portal-WebsitesExtension"
			}
		},
		"enableDiagnosticsSettingsForServices": {
			"type": "string",
			"defaultValue": "Yes",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "Diagnostic settings are used to configure streaming export of platform logs and metrics for a resource to the destination of your choice."
			}
		},
		"diagnosticsLogsRetentionInDays": {
			"type": "int",
			"defaultValue": 0,
			"minValue": 0,
			"maxValue": 365,
			"metadata": {
				"description": "Defines the number of days that the logs are retained. If you do not want to apply any retention policy and retain data forever, set value to 0."
			}
		},
		"iotHubSKUName": {
			"type": "string",
			"defaultValue": "S1",
			"allowedValues": [
				"F1",
				"B1",
				"B2",
				"B3",
				"S1",
				"S2",
				"S3"
			],
			"metadata": {
				"description": "Defines IoT Hub's pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/iot-hub/"
			}
		},
		"iotHubSKUCapacity": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"metadata": {
				"description": "Defines IoT Hub's SKU capacity. Check details at https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-scaling"
			}
		},
		"iotHubPartitionCount": {
			"type": "int",
			"defaultValue": 4,
			"minValue": 2,
			"metadata": {
				"description": "Defines IoT Hub's Partition Count. Check details at https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-scaling#partitions"
			}
		},
		"AzureDataExplorerSKUName": {
			"type": "string",
			"defaultValue": "Standard_D11_v2",
			"allowedValues": [
				"Dev(No SLA)_Standard_D11_v2",
				"Standard_D11_v2",
				"Standard_D12_v2",
				"Standard_D13_v2",
				"Standard_D14_v2",
				"Standard_DS13_v2+1TB_PS",
				"Standard_DS13_v2+2TB_PS",
				"Standard_DS14_v2+3TB_PS",
				"Standard_DS14_v2+4TB_PS",
				"Standard_L16s",
				"Standard_L4s",
				"Standard_L8s"
			],
			"metadata": {
				"description": "Defines ADX cluster SKU name. Check details at https://docs.microsoft.com/en-us/azure/data-explorer/manage-cluster-choose-sku"
			}
		},
		"AzureDataExplorerSKUTier": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Standard",
				"Basic"
			],
			"metadata": {
				"description": "Defines ADX cluster SKU tier. Check details at https://docs.microsoft.com/en-us/rest/api/azurerekusto/clusters/listskus#azureskutier"
			}
		},
		"AzureDataExplorerSKUCapacity": {
			"type": "int",
			"defaultValue": 2,
			"allowedValues": [
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16
			],
			"metadata": {
				"description": "Defines the number of instances of the ADX cluster. Check details at https://docs.microsoft.com/en-us/rest/api/azurerekusto/clusters/listskus"
			}
		},
		"databaseHotCachePeriod": {
			"type": "int",
			"defaultValue": 90,
			"minValue": 1,
			"maxValue": 36500,
			"metadata": {
				"description": "Defines the number of days to retain data in cache for quick access (minValue=1, maxValue=36500)."
			}
		},
		"ingestionType": {
			"type": "string",
			"defaultValue": "Batching",
			"allowedValues": [
				"Batching",
				"Streaming"
			],
			"metadata": {
				"description": "Defines ingestion type for mapping and notification function."
			}
		},
		"eventHubSKUTier": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Standard",
				"Basic"
			],
			"metadata": {
				"description": "Defines the billing tier of event hub namespaces SKU."
			}
		},
		"eventHubSKUCapacity": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20
			],
			"metadata": {
				"description": "Defines event hubs throughput units."
			}
		},
		"eventHubAutoInflateThroughput": {
			"defaultValue": "Yes",
			"allowedValues": [
				"Yes",
				"No"
			],
			"type": "String",
			"metadata": {
				"description": "Auto-Inflate enables you to scale-up your throughput units automatically to meet your usage needs."
			}
		},
		"eventHubThroughputUnits": {
			"defaultValue": 5,
			"allowedValues": [
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20
			],
			"type": "Int",
			"metadata": {
				"description": "Defines auto-inflate throughput units."
			}
		},
		"eventHubPartitionsForADXTimeSeries": {
			"type": "int",
			"defaultValue": 5,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for ADX Time Series."
			}
		},
		"eventHubPartitionsForProcessedTimeSeriesInbound": {
			"type": "int",
			"defaultValue": 5,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for Processed Time Series Inbound for time series records ingested from SAP IoT Time Series APIs."
			}
		},
		"eventHubPartitionsForProcessedTimeSeriesOutbound": {
			"type": "int",
			"defaultValue": 5,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for Processed Time Series Out."
			}
		},
		"eventHubPartitionsForModelChangeNotification": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for ADX Notification."
			}
		},
		"eventHubPartitionsForDeviceManagementRequest": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for Device Management Request."
			}
		},
		"eventHubPartitionsForDeviceManagementStatus": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for Device Management Status."
			}
		},
		"eventHubPartitionsForDeleteTimeSeriesRequest": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for Delete Timeseries."
			}
		},
		"eventHubPartitionsForDeleteTimeSeriesStatus": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32
			],
			"metadata": {
				"description": "Defines number of event hub partitions for Delete Timeseries Status."
			}
		},
		"keyVaultSKUName": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Standard",
				"Premium"
			],
			"metadata": {
				"description": "Defines whether the key vault is a standard vault or a premium vault."
			}
		},
		"redisCacheSKUName": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Basic",
				"Standard",
				"Premium"
			],
			"metadata": {
				"description": "Defines the type of Redis cache."
			}
		},
		"redisCacheSKUCapacity": {
			"type": "int",
			"defaultValue": 0,
			"allowedValues": [
				0,
				1,
				2,
				3,
				4,
				5,
				6
			],
			"metadata": {
				"description": "Defines the size of Redis cache. (Family C: 0, 1, 2, 3, 4, 5, 6 - Family P: 1, 2, 3, 4)."
			}
		}
	},
	"variables": {
		"SAPIoTAzureRefTemplateVersion": "${project.version}",
		"uniqueAppName": "[concat(parameters('name'), '-', uniqueString(resourceGroup().id))]",
		"storageName": "[toLower(substring(concat('stingestion', uniqueString(variables('uniqueAppName'))), 0, 24))]",
		"notificationStorageName": "[toLower(substring(concat('stnotification', uniqueString(variables('uniqueAppName'))), 0, 24))]",
		"deviceStorageName": "[toLower(substring(concat('stdevicemanagement', uniqueString(variables('uniqueAppName'))), 0, 24))]",
		"diagnosticStorageName": "[toLower(substring(concat('stdiagnostic', uniqueString(variables('uniqueAppName'))), 0, 24))]",
		"deleteTimeseriesStorageName": "[toLower(substring(concat('stdeletetimeseries', uniqueString(variables('uniqueAppName'))), 0, 24))]",
		"coldStoreExportStorageName": "[toLower(substring(concat('stcoldexport', uniqueString(variables('uniqueAppName'))), 0, 24))]",
		"coldStoreExportContainerName": "cold-store-export",
		"coldStoreExportFilesRetentionInDays": 7,
		"coldStoreADXExportTempVerifyPermissionFileRetentionInDays": "1",
		"appInsightsName": "[toLower(concat('appi-', uniqueString(variables('uniqueAppName'))))]",
		"iotHubName": "[substring(concat('iot-', uniqueString(resourceGroup().id), '-', parameters('name')), 0, 16)]",
		"iotHubAccountId": "[concat(resourceGroup().id,'/providers/Microsoft.Devices/IotHubs/', variables('iotHubName'))]",
		"ADXClustersName": "[substring(concat('kusto', uniqueString(variables('uniqueAppName'))), 0, 10)]",
		"ADXClustersDatabaseName": "timeseries-db",
		"ADXResourceLocation": "[resourceGroup().location]",
		"ADXIngestion": "[substring(concat('ingest-', uniqueString(variables('uniqueAppName'))), 0, 10)]",
		"redisCacheName": "[substring(concat('redis-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"eventHubNamespaces": "[substring(concat('evh-ns-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"eventHubNamespacesExternalID": "[resourceId('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
		"eventHubADXIngestion": "sap.iot.abstract.adx_timeseries.v1",
		"eventHubADXIngestionPolicyListen": "adx-timeseries-policy-listen",
		"eventHubADXIngestionPolicySend": "adx-timeseries-policy-send",
		"eventHubADXIngestionConsumerGroup": "sap-iot-ingestion-adx-cg",
		"eventHubModelChangeNotification": "sap.iot.modelabstraction.meta.change.v1",
		"eventHubModelChangeNotificationPolicyListen": "model-change-notification-policy-listen",
		"eventHubModelChangeNotificationPolicySend": "model-change-notification-policy-send",
		"eventHubModelChangeNotificationConsumerGroup": "sap-iot-notification-handler-cg",
		"eventHubProcessedTimeSeriesOut": "sap.iot.abstract.processed_timeseries_out.v1",
		"eventHubProcessedTimeSeriesOutPolicyListen": "processed-timeseries-out-policy-listen",
		"eventHubProcessedTimeSeriesOutPolicySend": "processed-timeseries-out-policy-send",
		"eventHubProcessedTimeSeriesIn": "sap.iot.abstract.processed_timeseries_in.v1",
		"eventHubProcessedTimeSeriesInPolicyListen": "processed-timeseries-in-policy-listen",
		"eventHubProcessedTimeSeriesInPolicySend": "processed-timeseries-in-policy-send",
		"eventHubDeviceManagementRequest": "sap.iot.abstraction.device.management.request",
		"eventHubDeviceManagementRequestPolicyListen": "device-management-request-policy-listen",
		"eventHubDeviceManagementRequestPolicySend": "device-management-request-policy-send",
		"eventHubDeviceManagementRequestConsumerGroup": "sap-iot-device-management-request-cg",
		"eventHubDeviceManagementStatus": "sap.iot.abstraction.device.management.status",
		"eventHubDeviceManagementStatusPolicyListen": "device-management-status-policy-listen",
		"eventHubDeviceManagementStatusPolicySend": "device-management-status-policy-send",
		"eventHubDeviceManagementStatusConsumerGroup": "sap-iot-device-management-status-cg",
		"eventHubDeleteTimeseriesRequest": "sap.iot.abstraction.timeseries.delete.request",
		"eventHubDeleteTimeseriesRequestPolicyListen": "delete-timeseries-request-policy-listen",
		"eventHubDeleteTimeseriesRequestPolicySend": "delete-timeseries-request-policy-send",
		"eventHubDeleteTimeseriesRequestConsumerGroup": "sap-iot-timeseries-delete-request-cg",
		"eventHubDeleteTimeseriesStatus": "sap.iot.abstraction.timeseries.delete.status",
		"eventHubDeleteTimeseriesStatusPolicyListen": "delete-timeseries-status-policy-listen",
		"eventHubDeleteTimeseriesStatusPolicySend": "delete-timeseries-status-policy-send",
		"eventHubDeleteTimeseriesStatusConsumerGroup": "sap-iot-timeseries-delete-status-cg",
		"vaultName": "[substring(concat('kv-', uniqueString(variables('uniqueAppName'))), 0, 10)]",
		"SPAclientId": "service-principal-application-client-id",
		"SPAKey": "service-principal-application-key",
		"SPAuthoriyId": "service-principal-authority-id",
		"clientId": "client-id",
		"clientSecret": "client-secret",
		"ADXSourceConnectionString": "adx-source-connection-string",
		"processedTimeSeriesConnectionString": "processed-timeseries-connection-string",
		"processedTimeSeriesIn": "processed-timeseries-in-connection-string",
		"eventProcessHubConnectionString": "event-process-hub-connection-string",
		"deviceManagementRequestConnectionString": "device-management-request-connection-string",
		"deviceManagementStatusConnectionString": "device-management-status-connection-string",
		"deleteTimeseriesConnectionString": "delete-timeseries-connection-string",
		"deleteStatusConnectionString": "delete-status-connection-string",
		"azureCacheKey": "azure-cache-key",
		"functionAppIngestionDiagnosticName": "[substring(concat('ingest-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"functionAppNotificationDiagnosticName": "[substring(concat('notify-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"functionAppDeviceManagementDiagnosticName": "[substring(concat('device-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"functionAppDeleteTimeseriesDiagnosticName": "[substring(concat('delete-ts-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"iotHubDiagnosticName": "[substring(concat('iot-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"ADXDiagnosticName": "[substring(concat('adx-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"eventHubDiagnosticName": "[substring(concat('evh-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"keyVaultDiagnosticName": "[substring(concat('kv-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"redisCacheDiagnosticName": "[substring(concat('redis-ds-', uniqueString(variables('uniqueAppName'))), 0, 16)]",
		"notificationEventhubConnectionString": "notification-eventhub-connection-string",
		"iothubRegistryConnectionString": "iothub-registry-connection-string",
		"enabledSettings": "Yes",
		"ingestionTypeSettings": {
			"Streaming": {
				"enabled": true
			},
			"Batching": {
				"enabled": false
			}
		},
		"ingestionFunctionSKU": {
			"Consumption": {
				"name": "Y1",
				"tier": "Dynamic",
				"propName": ""
			},
			"ElasticPremiumEP1": {
				"name": "EP1",
				"tier": "ElasticPremium",
				"propName": "-ep"
			},
			"ElasticPremiumEP2": {
				"name": "EP2",
				"tier": "ElasticPremium",
				"propName": "-ep"
			},
			"ElasticPremiumEP3": {
				"name": "EP3",
				"tier": "ElasticPremium",
				"propName": "-ep"
			}
		},
		"autoInflateSettings": {
			"Yes": {
				"enabled": true,
				"throughputUnits": "[parameters('eventHubThroughputUnits')]"
			},
			"No": {
				"enabled": false,
				"throughputUnits": ""
			}
		},
		"ep": "[string(variables('ingestionFunctionSKU')[parameters('ingestionFunctionServicePlan')].propName)]",
		"serverFarmsEP": "[concat(variables('uniqueAppName'), '-ep')]",
		"ingestionStorageConnectionString": "ingestion-storage-connection-string",
		"notificationStorageConnectionString": "notification-storage-connection-string",
		"deviceStorageConnectionString": "device-storage-connection-string",
		"deleteTimeseriesStorageConnectionString": "delete-timeseries-storage-connection-string",
		"appInsightsIntrumentationKey": "app-insights-instrumentation-key"
	},
	"resources": [
		{
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "2018-02-01",
			"name": "[ variables('uniqueAppName')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "Y1",
				"tier": "Dynamic"
			},
			"properties": {
				"name": "[ variables('uniqueAppName')]",
				"computeMode": "Dynamic"
			}
		},
		{
			"condition": "[not(equals(parameters('ingestionFunctionServicePlan'), 'Consumption'))]",
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "2018-02-01",
			"name": "[variables('serverFarmsEP')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "[variables('ingestionFunctionSKU')[parameters('ingestionFunctionServicePlan')].name]",
				"tier": "[variables('ingestionFunctionSKU')[parameters('ingestionFunctionServicePlan')].tier]"
			},
			"kind": "elastic",
			"properties": {
				"maximumElasticWorkerCount": 32
			}
		},
		{
			"apiVersion": "2016-03-01",
			"name": "[variables('uniqueAppName')]",
			"type": "Microsoft.Web/sites",
			"properties": {
				"name": "[variables('uniqueAppName')]",
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(variables('uniqueAppName'), variables('ep')))]",
				"httpsOnly": true
			},
			"tags": {
				"SAPIoTAzureRefTemplateVersion": "[variables('SAPIoTAzureRefTemplateVersion')]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
				"[resourceId('Microsoft.Web/serverfarms', concat(variables('uniqueAppName'), variables('ep')))]"
			],
			"resources": [
				{
					"apiVersion": "2018-02-01",
					"name": "appsettings",
					"type": "config",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', variables('uniqueAppName'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAclientId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAKey'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAuthoriyId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('clientId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('clientSecret'))]"
					],
					"properties": {
						"FUNCTIONS_WORKER_RUNTIME": "java",
						"AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('ingestionStorageConnectionString'))).secretUriWithVersion, ')')]",
						"FUNCTIONS_EXTENSION_VERSION": "~3",
						"WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('ingestionStorageConnectionString'))).secretUriWithVersion, ')')]",
						"WEBSITE_CONTENTSHARE": "[concat(toLower(variables('uniqueAppName')))]",
						"WEBSITE_RUN_FROM_ZIP": "[parameters('mappingFunctionZipURI')]",
						"APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey]",
						"WEBSITE_RUN_FROM_PACKAGE": "1",
						"service-principal-application-client-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAclientId'))).secretUriWithVersion, ')')]",
						"service-principal-application-key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAKey'))).secretUriWithVersion, ')')]",
						"service-principal-authority-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAuthoriyId'))).secretUriWithVersion, ')')]",
						"client-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('clientId'))).secretUriWithVersion, ')')]",
						"client-secret": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('clientSecret'))).secretUriWithVersion, ')')]",
						"azure-cache-host": "[concat(variables('redisCacheName'), '.redis.cache.windows.net')]",
						"adx-resource-uri": "[concat('https://', variables('ADXClustersName'), '.', variables('ADXResourceLocation'), '.kusto.windows.net')]",
						"adx-ingestion-resource-uri": "[concat('https://', 'ingest-', variables('ADXClustersName'), '.', variables('ADXResourceLocation'), '.kusto.windows.net')]",
						"adx-source-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('ADXSourceConnectionString'))).secretUriWithVersion, ')')]",
						"processed-timeseries-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('processedTimeSeriesConnectionString'))).secretUriWithVersion, ')')]",
						"processed-timeseries-in-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('processedTimeSeriesIn'))).secretUriWithVersion, ')')]",
						"iothub-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('eventProcessHubConnectionString'))).secretUriWithVersion, ')')]",
						"APPLICATIONINSIGHTS_CONNECTION_STRING": "[concat('InstrumentationKey=',reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey)]",
						"azure-cache-key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('azureCacheKey'))).secretUriWithVersion, ')')]",
						"transform-default-message-type": "SAPIoTDeviceModel",
						"sap-iot-tenant": "[parameters('SAPIotTenantID')]",
						"adx-database-name": "[variables('ADXClustersDatabaseName')]",
						"eventhub-sku-tier": "[parameters('eventHubSKUTier')]",
						"lookup-app-host": "[parameters('modelConfigurationAppHost')]",
						"mapping-app-host": "[parameters('modelMappingAppHost')]",
						"token-endpoint": "[parameters('SAPIotTenantAuthenticationTokenEndpoint')]",
						"sap-iot-required-api-scopes": "[parameters('scopesToAccessSAPIotApis')]",
						"ingestion-type": "[parameters('ingestionType')]"
					}
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Web/sites/providers/diagnosticsettings",
					"name": "[concat(variables('uniqueAppName'),'/microsoft.insights/', variables('functionAppIngestionDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', variables('uniqueAppName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "FunctionAppLogs",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			],
			"location": "[resourceGroup().location]",
			"identity": {
				"type": "SystemAssigned"
			},
			"kind": "functionapp"
		},
		{
			"apiVersion": "2016-03-01",
			"name": "[concat(variables('uniqueAppName'), '-notify')]",
			"type": "Microsoft.Web/sites",
			"properties": {
				"name": "[concat(variables('uniqueAppName'), '-notify')]",
				"httpsOnly": true
			},
			"tags": {
				"SAPIoTAzureRefTemplateVersion": "[variables('SAPIoTAzureRefTemplateVersion')]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('notificationStorageName'))]",
				"[resourceId('Microsoft.Web/serverfarms', concat(variables('uniqueAppName'), variables('ep')))]"
			],
			"resources": [
				{
					"apiVersion": "2018-02-01",
					"name": "appsettings",
					"type": "config",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', concat(variables('uniqueAppName'), '-notify'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAclientId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAKey'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAuthoriyId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('clientId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('clientSecret'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('notificationEventhubConnectionString'))]"
					],
					"properties": {
						"FUNCTIONS_WORKER_RUNTIME": "java",
						"AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('notificationStorageConnectionString'))).secretUriWithVersion, ')')]",
						"FUNCTIONS_EXTENSION_VERSION": "~3",
						"WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('notificationStorageConnectionString'))).secretUriWithVersion, ')')]",
						"WEBSITE_CONTENTSHARE": "[concat(toLower(concat(variables('uniqueAppName'), '-notify')))]",
						"WEBSITE_RUN_FROM_ZIP": "[parameters('notificationFunctionZipURI')]",
						"APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey]",
						"WEBSITE_RUN_FROM_PACKAGE": "1",
						"service-principal-application-client-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAclientId'))).secretUriWithVersion, ')')]",
						"service-principal-application-key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAKey'))).secretUriWithVersion, ')')]",
						"service-principal-authority-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAuthoriyId'))).secretUriWithVersion, ')')]",
						"client-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('clientId'))).secretUriWithVersion, ')')]",
						"client-secret": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('clientSecret'))).secretUriWithVersion, ')')]",
						"azure-cache-host": "[concat(variables('redisCacheName'), '.redis.cache.windows.net')]",
						"adx-resource-uri": "[concat('https://', variables('ADXClustersName'), '.', variables('ADXResourceLocation'), '.kusto.windows.net')]",
						"adx-ingestion-resource-uri": "[concat('https://', 'ingest-', variables('ADXClustersName'), '.', variables('ADXResourceLocation'), '.kusto.windows.net')]",
						"APPLICATIONINSIGHTS_CONNECTION_STRING": "[concat('InstrumentationKey=',reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey)]",
						"azure-cache-key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('azureCacheKey'))).secretUriWithVersion, ')')]",
						"adx-database-name": "[variables('ADXClustersDatabaseName')]",
						"eventhub-sku-tier": "[parameters('eventHubSKUTier')]",
						"lookup-app-host": "[parameters('modelConfigurationAppHost')]",
						"token-endpoint": "[parameters('SAPIotTenantAuthenticationTokenEndpoint')]",
						"notification-eventhub-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('notificationEventhubConnectionString'))).secretUriWithVersion, ')')]",
						"sap-iot-required-api-scopes": "[parameters('scopesToAccessSAPIotApis')]",
						"ingestion-type": "[parameters('ingestionType')]"
					}
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Web/sites/providers/diagnosticsettings",
					"name": "[concat(variables('uniqueAppName'), '-notify','/microsoft.insights/', variables('functionAppNotificationDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', concat(variables('uniqueAppName'), '-notify'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "FunctionAppLogs",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			],
			"location": "[resourceGroup().location]",
			"identity": {
				"type": "SystemAssigned"
			},
			"kind": "functionapp"
		},
		{
			"apiVersion": "2016-03-01",
			"name": "[concat(variables('uniqueAppName'), '-device')]",
			"type": "Microsoft.Web/sites",
			"properties": {
				"name": "[concat(variables('uniqueAppName'), '-device')]",
				"httpsOnly": true
			},
			"tags": {
				"SAPIoTAzureRefTemplateVersion": "[variables('SAPIoTAzureRefTemplateVersion')]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('deviceStorageName'))]",
				"[resourceId('Microsoft.Web/serverfarms', concat(variables('uniqueAppName'), variables('ep')))]"
			],
			"resources": [
				{
					"apiVersion": "2018-02-01",
					"name": "appsettings",
					"type": "config",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', concat(variables('uniqueAppName'), '-device'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('deviceManagementRequestConnectionString'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('deviceManagementStatusConnectionString'))]"
					],
					"properties": {
						"FUNCTIONS_WORKER_RUNTIME": "java",
						"AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deviceStorageConnectionString'))).secretUriWithVersion, ')')]",
						"FUNCTIONS_EXTENSION_VERSION": "~3",
						"WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deviceStorageConnectionString'))).secretUriWithVersion, ')')]",
						"WEBSITE_CONTENTSHARE": "[concat(toLower(concat(variables('uniqueAppName'), '-device')))]",
						"WEBSITE_RUN_FROM_ZIP": "[parameters('deviceManagementFunctionZipURI')]",
						"APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey]",
						"WEBSITE_RUN_FROM_PACKAGE": "1",
						"APPLICATIONINSIGHTS_CONNECTION_STRING": "[concat('InstrumentationKey=',reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey)]",
						"device-management-request-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deviceManagementRequestConnectionString'))).secretUriWithVersion, ')')]",
						"device-management-status-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deviceManagementStatusConnectionString'))).secretUriWithVersion, ')')]",
						"iothub-registry-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('iothubRegistryConnectionString'))).secretUriWithVersion, ')')]"
					}
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Web/sites/providers/diagnosticsettings",
					"name": "[concat(variables('uniqueAppName'), '-device','/microsoft.insights/', variables('functionAppDeviceManagementDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', concat(variables('uniqueAppName'), '-device'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "FunctionAppLogs",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			],
			"location": "[resourceGroup().location]",
			"identity": {
				"type": "SystemAssigned"
			},
			"kind": "functionapp"
		},
		{
			"apiVersion": "2016-03-01",
			"name": "[concat(variables('uniqueAppName'), '-delete-ts')]",
			"type": "Microsoft.Web/sites",
			"properties": {
				"name": "[concat(variables('uniqueAppName'), '-delete-ts')]",
				"httpsOnly": true
			},
			"tags": {
				"SAPIoTAzureRefTemplateVersion": "[variables('SAPIoTAzureRefTemplateVersion')]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('deleteTimeseriesStorageName'))]",
				"[resourceId('Microsoft.Web/serverfarms', concat(variables('uniqueAppName'), variables('ep')))]"
			],
			"resources": [
				{
					"apiVersion": "2018-02-01",
					"name": "appsettings",
					"type": "config",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', concat(variables('uniqueAppName'), '-delete-ts'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('deleteTimeseriesConnectionString'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('deleteStatusConnectionString'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAclientId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAKey'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('SPAuthoriyId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('clientId'))]",
						"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('vaultName'), variables('clientSecret'))]"
					],
					"properties": {
						"FUNCTIONS_WORKER_RUNTIME": "java",
						"AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deleteTimeseriesStorageConnectionString'))).secretUriWithVersion, ')')]",
						"delete-timeseries-eventhub-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deleteTimeseriesConnectionString'))).secretUriWithVersion, ')')]",
						"delete-status-eventhub-connection-string": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deleteStatusConnectionString'))).secretUriWithVersion, ')')]",
						"service-principal-application-client-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAclientId'))).secretUriWithVersion, ')')]",
						"service-principal-application-key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAKey'))).secretUriWithVersion, ')')]",
						"service-principal-authority-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('SPAuthoriyId'))).secretUriWithVersion, ')')]",
						"client-id": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('clientId'))).secretUriWithVersion, ')')]",
						"client-secret": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('clientSecret'))).secretUriWithVersion, ')')]",
						"azure-cache-host": "[concat(variables('redisCacheName'), '.redis.cache.windows.net')]",
						"adx-resource-uri": "[concat('https://', variables('ADXClustersName'), '.', variables('ADXResourceLocation'), '.kusto.windows.net')]",
						"adx-ingestion-resource-uri": "[concat('https://', 'ingest-', variables('ADXClustersName'), '.', variables('ADXResourceLocation'), '.kusto.windows.net')]",
						"azure-cache-key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('azureCacheKey'))).secretUriWithVersion, ')')]",
						"adx-database-name": "[variables('ADXClustersDatabaseName')]",
						"lookup-app-host": "[parameters('modelConfigurationAppHost')]",
						"mapping-app-host": "[parameters('modelMappingAppHost')]",
						"token-endpoint": "[parameters('SAPIotTenantAuthenticationTokenEndpoint')]",
						"operation-storage-connection-string": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('deleteTimeseriesStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('deleteTimeseriesStorageName')), '2019-04-01').keys[0].value)]",
						"max-purge-requests": "32",
						"FUNCTIONS_EXTENSION_VERSION": "~3",
						"WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('vaultName'), '/secrets/', variables('deleteTimeseriesStorageConnectionString'))).secretUriWithVersion, ')')]",
						"WEBSITE_CONTENTSHARE": "[concat(toLower(concat(variables('uniqueAppName'), '-delete-ts')))]",
						"WEBSITE_RUN_FROM_ZIP": "[parameters('deleteTimeSeriesFunctionZipURI')]",
						"APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey]",
						"WEBSITE_RUN_FROM_PACKAGE": "1",
						"APPLICATIONINSIGHTS_CONNECTION_STRING": "[concat('InstrumentationKey=',reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey)]"
					}
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Web/sites/providers/diagnosticsettings",
					"name": "[concat(variables('uniqueAppName'), '-delete-ts','/microsoft.insights/', variables('functionAppDeleteTimeSeriesDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Web/sites/', concat(variables('uniqueAppName'), '-delete-ts'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('deleteTimeSeriesStorageName'))]",
						"logs": [
							{
								"category": "FunctionAppLogs",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			],
			"location": "[resourceGroup().location]",
			"identity": {
				"type": "SystemAssigned"
			},
			"kind": "functionapp"
		},
		{
			"apiVersion": "2019-04-01",
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('storageName')]",
			"location": "[resourceGroup().location]",
			"kind": "StorageV2",
			"sku": {
				"name": "Standard_RAGRS"
			},
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": true,
				"allowBlobPublicAccess": false,
				"minimumTlsVersion": "TLS1_2"
			}
		},
		{
			"apiVersion": "2019-04-01",
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('notificationStorageName')]",
			"location": "[resourceGroup().location]",
			"kind": "StorageV2",
			"sku": {
				"name": "Standard_RAGRS"
			},
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": true,
				"allowBlobPublicAccess": false,
				"minimumTlsVersion": "TLS1_2"
			}
		},
		{
			"apiVersion": "2019-04-01",
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('deviceStorageName')]",
			"location": "[resourceGroup().location]",
			"kind": "StorageV2",
			"sku": {
				"name": "Standard_RAGRS"
			},
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": true,
				"allowBlobPublicAccess": false,
				"minimumTlsVersion": "TLS1_2"
			}
		},
		{
			"apiVersion": "2019-04-01",
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('deleteTimeseriesStorageName')]",
			"location": "[resourceGroup().location]",
			"kind": "StorageV2",
			"sku": {
				"name": "Standard_RAGRS"
			},
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": true,
				"allowBlobPublicAccess": false,
				"minimumTlsVersion": "TLS1_2"
			},
			"resources": [
				{
					"name": "default/delete-operation-monitoring-queue",
					"type": "queueServices/queues",
					"apiVersion": "2019-06-01",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]"
					],
					"properties": {
						"metadata": {}
					}
				},
				{
					"name": "default/delete-operation-monitoring-queue-poison",
					"type": "queueServices/queues",
					"apiVersion": "2019-06-01",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]"
					],
					"properties": {
						"metadata": {}
					}
				},
				{
					"name": "default/purge-operation-queue",
					"type": "queueServices/queues",
					"apiVersion": "2019-06-01",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]"
					],
					"properties": {
						"metadata": {}
					}
				}
			]
		},
		{
			"apiVersion": "2019-04-01",
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('diagnosticStorageName')]",
			"location": "[resourceGroup().location]",
			"kind": "StorageV2",
			"sku": {
				"name": "Standard_RAGRS"
			},
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"accessTier": "Cool",
				"supportsHttpsTrafficOnly": true,
				"allowBlobPublicAccess": false,
				"minimumTlsVersion": "TLS1_2"
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-04-01",
			"name": "[variables('coldStoreExportStorageName')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "Standard_RAGRS"
			},
			"kind": "StorageV2",
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": true,
				"allowBlobPublicAccess": false,
				"minimumTlsVersion": "TLS1_2"
			},
			"resources": [
				{
					"type": "blobServices/containers",
					"apiVersion": "2019-06-01",
					"name": "[concat('default/', variables('coldStoreExportContainerName'))]",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts', variables('coldStoreExportStorageName'))]"
					],
					"properties": {
						"publicAccess": "None"
					}
				},
				{
					"name": "[concat(variables('coldStoreExportStorageName'), '/default')]",
					"type": "Microsoft.Storage/storageAccounts/managementPolicies",
					"apiVersion": "2019-04-01",
					"dependsOn": [
						"[variables('coldStoreExportStorageName')]"
					],
					"properties": {
						"policy": {
							"rules": [
								{
									"name": "adxExportStagingExpirationRule",
									"enabled": true,
									"type": "Lifecycle",
									"definition": {
										"filters": {
											"blobTypes": [ "blockBlob" ],
											"prefixMatch": [ "cold-store-export/export" ]
										},
										"actions": {
											"baseBlob": {
												"delete": { "daysAfterModificationGreaterThan": "[variables('coldStoreExportFilesRetentionInDays')]" }
											}
										}
									}
								},
								{
									"name": "adxExportVerifyPermissionsTempFileExpirationRule",
									"enabled": true,
									"type": "Lifecycle",
									"definition": {
										"filters": {
											"blobTypes": [ "blockBlob" ],
											"prefixMatch": [ "cold-store-export/adx-export-verify.txt" ]
										},
										"actions": {
											"baseBlob": {
												"delete": { "daysAfterModificationGreaterThan": "[variables('coldStoreADXExportTempVerifyPermissionFileRetentionInDays')]" }
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"apiVersion": "2018-05-01-preview",
			"name": "[variables('appInsightsName')]",
			"type": "Microsoft.Insights/components",
			"location": "[resourceGroup().location]",
			"kind": "web",
			"tags": {
				"displayName": "AppInsightsComponent"
			},
			"properties": {
				"Application_Type": "web",
				"Request_Source": "IbizaWebAppExtensionCreate"
			}
		},
		{
			"name": "[variables('ADXClustersName')]",
			"type": "Microsoft.Kusto/clusters",
			"sku": {
				"name": "[parameters('AzureDataExplorerSKUName')]",
				"tier": "[parameters('AzureDataExplorerSKUTier')]",
				"capacity": "[parameters('AzureDataExplorerSKUCapacity')]"
			},
			"apiVersion": "2020-06-14",
			"location": "[resourceGroup().location]",
			"properties": {
				"enableDiskEncryption": true,
				"enableStreamingIngest": "[variables('ingestionTypeSettings')[parameters('ingestionType')].enabled]",
				"enablePurge": true
			},
			"resources": [
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Kusto/clusters/providers/diagnosticSettings",
					"name": "[concat(variables('ADXClustersName'),'/microsoft.insights/', variables('ADXDiagnosticName'))]",
					"dependsOn": [
						"[resourceId('Microsoft.Kusto/Clusters', variables('ADXClustersName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"apiVersion": "2017-05-01-preview",
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "FailedIngestion",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			]
		},
		{
			"name": "[concat(variables('ADXClustersName'), '/', variables('ADXClustersDatabaseName'))]",
			"type": "Microsoft.Kusto/clusters/databases",
			"apiVersion": "2019-11-09",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Kusto/clusters', variables('ADXClustersName'))]"
			],
			"kind": "ReadWrite",
			"properties": {
				"hotCachePeriodInDays": "[parameters('databaseHotCachePeriod')]"
			},
			"resources": [
				{
					"type": "Microsoft.Kusto/Clusters/Databases/DataConnections",
					"apiVersion": "2019-11-09",
					"name": "[concat(variables('ADXClustersName'), '/', variables('ADXClustersDatabaseName'), '/', variables('ADXIngestion'))]",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Kusto/Clusters/Databases', variables('ADXClustersName'), variables('ADXClustersDatabaseName'))]",
						"[resourceId('Microsoft.Kusto/Clusters', variables('ADXClustersName'))]"
					],
					"kind": "EventHub",
					"properties": {
						"eventHubResourceId": "[concat(resourceId('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces')), '/eventhubs/sap.iot.abstract.adx_timeseries.v1')]",
						"consumerGroup": "[variables('eventHubADXIngestionConsumerGroup')]",
						"tableName": "",
						"eventSystemProperties": [
							"x-opt-enqueued-time"
						]
					}
				},
				{
					"type": "Microsoft.Kusto/Clusters/Databases/PrincipalAssignments",
					"apiVersion": "2020-02-15",
					"name": "[concat(variables('ADXClustersName'), '/', variables('ADXClustersDatabaseName'), '/', variables('ADXClustersDatabaseName'), 'user')]",
					"dependsOn": [
						"[resourceId('Microsoft.Kusto/Clusters/Databases', variables('ADXClustersName'), variables('ADXClustersDatabaseName'))]",
						"[resourceId('Microsoft.Kusto/Clusters', variables('ADXClustersName'))]"
					],
					"properties": {
						"principalId": "[parameters('AADApplicationClientIdForAzureFunctions')]",
						"role": "User",
						"principalType": "App",
						"tenantId": "[parameters('AADTenantID')]"
					}
				},
				{
					"type": "Microsoft.Kusto/Clusters/Databases/PrincipalAssignments",
					"apiVersion": "2020-02-15",
					"name": "[concat(variables('ADXClustersName'), '/', variables('ADXClustersDatabaseName'), '/', variables('ADXClustersDatabaseName'), 'viewer')]",
					"dependsOn": [
						"[resourceId('Microsoft.Kusto/Clusters/Databases', variables('ADXClustersName'), variables('ADXClustersDatabaseName'))]",
						"[resourceId('Microsoft.Kusto/Clusters', variables('ADXClustersName'))]"
					],
					"properties": {
						"principalId": "[parameters('AADApplicationClientIdForSapIotAbstraction')]",
						"role": "Viewer",
						"principalType": "App",
						"tenantId": "[parameters('AADTenantID')]"
					}
				}
			]
		},
		{
			"type": "Microsoft.Cache/Redis",
			"apiVersion": "2019-07-01",
			"name": "[variables('redisCacheName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"sku": {
					"name": "[parameters('redisCacheSKUName')]",
					"family": "[if(equals(parameters('redisCacheSKUName'), 'Premium'), 'P', 'C')]",
					"capacity": "[parameters('redisCacheSKUCapacity')]"
				},
				"enableNonSslPort": false,
				"redisConfiguration": {
				}
			},
			"resources": [
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Cache/Redis/providers/diagnosticsettings",
					"name": "[concat(variables('redisCacheName'),'/microsoft.insights/', variables('redisCacheDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Cache/Redis/', variables('redisCacheName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			]
		},
		{
			"type": "Microsoft.Devices/IotHubs",
			"apiVersion": "2018-04-01",
			"location": "[resourceGroup().location]",
			"name": "[variables('iotHubName')]",
			"properties": {
				"eventHubEndpoints": {
					"events": {
						"retentionTimeInDays": 1,
						"partitionCount": "[parameters('iotHubPartitionCount')]"
					},
					"operationsMonitoringEvents": {
						"retentionTimeInDays": "1",
						"partitionCount": "[parameters('iotHubPartitionCount')]"
					}
				}
			},
			"sku": {
				"name": "[parameters('iotHubSKUName')]",
				"capacity": "[parameters('iotHubSKUCapacity')]"
			},
			"resources": [
				{
					"type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
					"apiVersion": "2018-04-01",
					"name": "[concat(variables('iotHubName'), '/events/sap-iot-ingestion-mapping-cg')]",
					"dependsOn": [
						"[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]"
					]
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.Devices/iotHubs/providers/diagnosticsettings",
					"name": "[concat(variables('iotHubName'),'/microsoft.insights/', variables('iotHubDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.Devices/IotHubs/', variables('iotHubName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "Connections",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							},
							{
								"category": "DeviceTelemetry",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			]
		},
		{
			"type": "Microsoft.EventHub/namespaces",
			"apiVersion": "2017-04-01",
			"name": "[variables('eventHubNamespaces')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "[parameters('eventHubSKUTier')]",
				"tier": "[parameters('eventHubSKUTier')]",
				"capacity": "[parameters('eventHubSKUCapacity')]"
			},
			"properties": {
				"zoneRedundant": false,
				"isAutoInflateEnabled": "[variables('autoInflateSettings')[parameters('eventHubAutoInflateThroughput')].enabled]",
				"maximumThroughputUnits": "[variables('autoInflateSettings')[parameters('eventHubAutoInflateThroughput')].throughputUnits]",
				"kafkaEnabled": false
			},
			"resources": [
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubADXIngestion')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForADXTimeSeries')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubADXIngestionConsumerGroup')]",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubADXIngestion'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubADXIngestionPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubADXIngestion'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubADXIngestionPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubADXIngestion'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}
					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubModelChangeNotification')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForModelChangeNotification')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubModelChangeNotificationConsumerGroup')]",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubModelChangeNotification'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubModelChangeNotificationPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubModelChangeNotification'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubModelChangeNotificationPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubModelChangeNotification'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}

					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubProcessedTimeSeriesOut')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForProcessedTimeSeriesOutbound')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "sap-iot-processed-ts-cg",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubProcessedTimeSeriesOut'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubProcessedTimeSeriesOutPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubProcessedTimeSeriesOut'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubProcessedTimeSeriesOutPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubProcessedTimeSeriesOut'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}
					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubProcessedTimeSeriesIn')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForProcessedTimeSeriesInbound')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "sap-iot-ingestion-avro-parser-cg",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubProcessedTimeSeriesIn'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubProcessedTimeSeriesInPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubProcessedTimeSeriesIn'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubProcessedTimeSeriesInPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubProcessedTimeSeriesIn'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}
					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubDeviceManagementRequest')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForDeviceManagementRequest')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeviceManagementRequestConsumerGroup')]",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeviceManagementRequest'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeviceManagementRequestPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeviceManagementRequest'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeviceManagementRequestPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeviceManagementRequest'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}

					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubDeviceManagementStatus')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForDeviceManagementStatus')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeviceManagementStatusConsumerGroup')]",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeviceManagementStatus'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeviceManagementStatusPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeviceManagementStatus'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeviceManagementStatusPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeviceManagementStatus'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}

					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubDeleteTimeseriesRequest')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForDeleteTimeSeriesRequest')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeleteTimeseriesRequestConsumerGroup')]",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeleteTimeseriesRequest'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeleteTimeseriesRequestPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeleteTimeseriesRequest'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeleteTimeseriesRequestPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeleteTimeseriesRequest'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}
					]
				},
				{
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubDeleteTimeseriesStatus')]",
					"type": "eventhubs",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"messageRetentionInDays": 3,
						"partitionCount": "[parameters('eventHubPartitionsForDeleteTimeSeriesStatus')]"
					},
					"resources": [
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeleteTimeseriesStatusConsumerGroup')]",
							"type": "consumergroups",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeleteTimeseriesStatus'))]"
							]
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeleteTimeseriesStatusPolicyListen')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeleteTimeseriesStatus'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubDeleteTimeseriesStatusPolicySend')]",
							"type": "AuthorizationRules",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/', variables('eventHubDeleteTimeseriesStatus'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						}
					]
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.EventHub/namespaces/providers/diagnosticSettings",
					"name": "[concat(variables('eventHubNamespaces'),'/microsoft.insights/', variables('eventHubDiagnosticName'))]",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"apiVersion": "2017-05-01-preview",
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "AutoScaleLogs",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							},
							{
								"category": "OperationalLogs",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				},
				{
					"type": "Microsoft.EventHub/namespaces/networkRuleSets",
					"apiVersion": "2018-01-01-preview",
					"name": "[concat(variables('eventHubNamespaces'), '/default')]",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'))]"
					],
					"properties": {
						"defaultAction": "Allow",
						"virtualNetworkRules": [],
						"ipRules": []
					}
				}
			]
		},
		{
			"type": "Microsoft.KeyVault/vaults",
			"name": "[variables('vaultName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/Sites', variables('uniqueAppName'))]",
				"[resourceId('Microsoft.Web/Sites', concat(variables('uniqueAppName'), '-notify'))]",
				"[resourceId('Microsoft.Web/Sites', concat(variables('uniqueAppName'), '-device'))]",
				"[resourceId('Microsoft.Web/Sites', concat(variables('uniqueAppName'), '-delete-ts'))]"
			],
			"apiVersion": "2018-02-14",
			"location": "[resourceGroup().location]",
			"properties": {
				"enabledForDeployment": true,
				"enabledForDiskEncryption": false,
				"enabledForTemplateDeployment": true,
				"tenantId": "[subscription().tenantId]",
				"accessPolicies": [
					{
						"objectId": "[reference(resourceId('Microsoft.Web/sites', variables('uniqueAppName')), '2018-02-01', 'Full').identity.principalId]",
						"tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('uniqueAppName')), '2018-02-01', 'Full').identity.tenantId]",
						"permissions": {
							"secrets": [
								"get",
								"list",
								"set"
							]
						}
					},
					{
						"objectId": "[reference(resourceId('Microsoft.Web/sites', concat(variables('uniqueAppName'), '-notify')), '2018-02-01', 'Full').identity.principalId]",
						"tenantId": "[reference(resourceId('Microsoft.Web/sites', concat(variables('uniqueAppName'), '-notify')), '2018-02-01', 'Full').identity.tenantId]",
						"permissions": {
							"secrets": [
								"get",
								"list",
								"set"
							]
						}
					},
					{
						"objectId": "[reference(resourceId('Microsoft.Web/sites', concat(variables('uniqueAppName'), '-device')), '2018-02-01', 'Full').identity.principalId]",
						"tenantId": "[reference(resourceId('Microsoft.Web/sites', concat(variables('uniqueAppName'), '-device')), '2018-02-01', 'Full').identity.tenantId]",
						"permissions": {
							"secrets": [
								"get",
								"list",
								"set"
							]
						}
					},
					{
						"objectId": "[reference(resourceId('Microsoft.Web/sites', concat(variables('uniqueAppName'), '-delete-ts')), '2018-02-01', 'Full').identity.principalId]",
						"tenantId": "[reference(resourceId('Microsoft.Web/sites', concat(variables('uniqueAppName'), '-delete-ts')), '2018-02-01', 'Full').identity.tenantId]",
						"permissions": {
							"secrets": [
								"get",
								"list",
								"set"
							]
						}
					}
				],
				"sku": {
					"name": "[parameters('keyVaultSKUName')]",
					"family": "A"
				},
				"networkAcls": {
					"defaultAction": "Allow",
					"bypass": "AzureServices"
				}
			},
			"resources": [
				{
					"type": "secrets",
					"apiVersion": "2018-02-14",
					"name": "[variables('SPAclientId')]",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]"
					],
					"properties": {
						"value": "[parameters('AADApplicationClientIdForAzureFunctions')]"
					}
				},
				{
					"type": "secrets",
					"apiVersion": "2018-02-14",
					"name": "[variables('SPAKey')]",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]"
					],
					"properties": {
						"value": "[parameters('AADClientSecret')]"
					}
				},
				{
					"type": "secrets",
					"apiVersion": "2018-02-14",
					"name": "[variables('SPAuthoriyId')]",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]"
					],
					"properties": {
						"value": "[parameters('AADTenantID')]"
					}
				},
				{
					"type": "secrets",
					"apiVersion": "2018-02-14",
					"name": "[variables('clientId')]",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]"
					],
					"properties": {
						"value": "[parameters('SAPIotTenantClientID')]"
					}
				},
				{
					"type": "secrets",
					"apiVersion": "2018-02-14",
					"name": "[variables('clientSecret')]",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]"
					],
					"properties": {
						"value": "[parameters('SAPIotTenantClientSecret')]"
					}
				},
				{
					"type": "secrets",
					"name": "[variables('eventProcessHubConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[concat('Endpoint=',reference(variables('iotHubAccountId')).eventHubEndpoints.events.endpoint,';SharedAccessKeyName=iothubowner;SharedAccessKey=',listKeys(variables('iotHubAccountId'),'2018-04-01').value[0].primaryKey,';EntityPath=',reference(variables('iotHubAccountId')).eventHubEndpoints.events.path)]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
						"[resourceId('Microsoft.Devices/IotHubs/', variables('iotHubName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('ADXSourceConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubADXIngestion'), variables('eventHubADXIngestionPolicySend')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubADXIngestion'), variables('eventHubADXIngestionPolicySend'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubADXIngestion'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('processedTimeSeriesConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubProcessedTimeSeriesOut'), variables('eventHubProcessedTimeSeriesOutPolicySend')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubProcessedTimeseriesOut'), variables('eventHubProcessedTimeseriesOutPolicySend'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubProcessedTimeSeriesOut'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('processedTimeSeriesIn')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubProcessedTimeSeriesIn'), variables('eventHubProcessedTimeSeriesInPolicyListen')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubProcessedTimeseriesIn'), variables('eventHubProcessedTimeseriesInPolicyListen'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubProcessedTimeSeriesIn'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('azureCacheKey')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2015-08-01').primaryKey]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
						"[concat('Microsoft.Cache/Redis/', variables('redisCacheName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('notificationEventhubConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubModelChangeNotification'), variables('eventHubModelChangeNotificationPolicyListen')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('notificationStorageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubModelChangeNotification'), variables('eventHubModelChangeNotificationPolicyListen'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubModelChangeNotification'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('deviceManagementRequestConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubDeviceManagementRequest'), variables('eventHubDeviceManagementRequestPolicyListen')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deviceStorageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubDeviceManagementRequest'), variables('eventHubDeviceManagementRequestPolicyListen'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubDeviceManagementRequest'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('deviceManagementStatusConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubDeviceManagementStatus'), variables('eventHubDeviceManagementStatusPolicySend')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deviceStorageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubDeviceManagementStatus'), variables('eventHubDeviceManagementStatusPolicySend'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubDeviceManagementStatus'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('deleteTimeseriesConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubDeleteTimeseriesRequest'), variables('eventHubDeleteTimeseriesRequestPolicyListen')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubDeleteTimeseriesRequest'), variables('eventHubDeleteTimeseriesRequestPolicyListen'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubDeleteTimeseriesRequest'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('deleteStatusConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'), variables('eventHubDeleteTimeseriesStatus'), variables('eventHubDeleteTimeseriesStatusPolicySend')), '2017-04-01').primaryConnectionString]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]",
						"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaces'),variables('eventHubDeleteTimeseriesStatus'), variables('eventHubDeleteTimeseriesStatusPolicySend'))]",
						"[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaces'),'/eventhubs/',variables('eventHubDeleteTimeseriesStatus'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('iothubRegistryConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[concat('HostName=', reference(variables('iotHubAccountId')).hostName, ';SharedAccessKeyName=registryReadWrite', ';SharedAccessKey=', listkeys(variables('iotHubAccountId'), '2018-04-01').value[4].primaryKey)]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deviceStorageName'))]",
						"[resourceId('Microsoft.Devices/IotHubs/', variables('iotHubName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('ingestionStorageConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2019-04-01').keys[0].value)]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('notificationStorageConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('notificationStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('notificationStorageName')), '2019-04-01').keys[0].value)]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('notificationStorageName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('deviceStorageConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('deviceStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('deviceStorageName')), '2019-04-01').keys[0].value)]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deviceStorageName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('deleteTimeseriesStorageConnectionString')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('deleteTimeseriesStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('deleteTimeseriesStorageName')), '2019-04-01').keys[0].value)]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('deleteTimeseriesStorageName'))]"
					]
				},
				{
					"type": "secrets",
					"name": "[variables('appInsightsIntrumentationKey')]",
					"apiVersion": "2018-02-14",
					"properties": {
						"value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2018-05-01-preview').InstrumentationKey]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Insights/components/', variables('appInsightsName'))]"
					]
				},
				{
					"condition": "[equals(parameters('enableDiagnosticsSettingsForServices'), variables('enabledSettings'))]",
					"type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
					"name": "[concat(variables('vaultName'),'/microsoft.insights/', variables('keyVaultDiagnosticName'))]",
					"apiVersion": "2017-05-01-preview",
					"location": "[resourceGroup().location]",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults/', variables('vaultName'))]",
						"[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageName'))]"
					],
					"properties": {
						"storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageName'))]",
						"logs": [
							{
								"category": "AuditEvent",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						],
						"metrics": [
							{
								"category": "AllMetrics",
								"enabled": true,
								"retentionPolicy": {
									"enabled": true,
									"days": "[parameters('diagnosticsLogsRetentionInDays')]"
								}
							}
						]
					}
				}
			]
		}
	],
	"$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0"
}